// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : top.v
// Device     : xc7a35t-csg324-1
// LiteX sha1 : 649c45e9
// Date       : 2022-01-09 18:08:51
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module top (
	output reg  user_led0,
	output reg  user_led1,
	(* dont_touch = "true" *)	input  wire clk100
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire signed [31:0] operand1;
wire signed [31:0] operand2;
reg  signed [31:0] alu_out = 32'd0;
reg  [15:0] operation = 16'd0;
wire [4:0] rs1_in;
wire [4:0] rs2_in;
wire [4:0] rd_in;
wire [31:0] din;
wire [31:0] reg_data1_out;
wire [31:0] reg_data2_out;
reg  write = 1'd0;
reg  [4:0] sp1_wrport_adr = 5'd0;
wire [31:0] sp1_wrport_dat_r;
reg  sp1_wrport_we = 1'd0;
reg  [31:0] sp1_wrport_dat_w = 32'd0;
wire [4:0] sp1_rdport_adr;
wire [31:0] sp1_rdport_dat_r;
reg  [4:0] sp2_wrport_adr = 5'd0;
wire [31:0] sp2_wrport_dat_r;
reg  sp2_wrport_we = 1'd0;
reg  [31:0] sp2_wrport_dat_w = 32'd0;
wire [4:0] sp2_rdport_adr;
wire [31:0] sp2_rdport_dat_r;
reg  [31:0] program_counter = 32'd0;
wire [31:0] pc_plus4;
wire [31:0] pc_input_mux_input0;
wire [31:0] pc_input_mux_input1;
wire [31:0] pc_input_mux_input2;
wire [31:0] pc_input_mux_input3;
reg  [31:0] pc_input_mux_output = 32'd0;
reg  [1:0] pc_input_mux_mux_control = 2'd0;
reg  pc_input_mux_is_branch = 1'd0;
wire [31:0] register_file_din_mux_input0;
wire [31:0] register_file_din_mux_input1;
wire [31:0] register_file_din_mux_input2;
wire [31:0] register_file_din_mux_input3;
reg  [31:0] register_file_din_mux_output = 32'd0;
reg  [1:0] register_file_din_mux_mux_control = 2'd0;
wire register_file_din_mux_is_branch;
wire [31:0] alu_op1_mux_input0;
wire [31:0] alu_op1_mux_input1;
wire [31:0] alu_op1_mux_input2;
wire [31:0] alu_op1_mux_input3;
reg  [31:0] alu_op1_mux_output = 32'd0;
reg  [1:0] alu_op1_mux_mux_control = 2'd0;
wire alu_op1_mux_is_branch;
wire [31:0] alu_op2_mux_input0;
wire [31:0] alu_op2_mux_input1;
wire [31:0] alu_op2_mux_input2;
wire [31:0] alu_op2_mux_input3;
wire [31:0] alu_op2_mux_input4;
reg  [31:0] alu_op2_mux_output = 32'd0;
reg  [2:0] alu_op2_mux_mux_control = 3'd0;
wire alu_op2_mux_is_branch;
wire [31:0] instruction;
wire [6:0] opcode;
wire [2:0] funct3;
wire [6:0] funct7;
wire [7:0] instrcut_mem_port_adr;
wire [31:0] instrcut_mem_port_dat_r;
reg  [7:0] data_mem_rd_port_adr = 8'd0;
wire [31:0] data_mem_rd_port_dat_r;
reg  [7:0] data_mem_wr_port_adr = 8'd0;
wire [31:0] data_mem_wr_port_dat_r;
reg  data_mem_wr_port_we = 1'd0;
reg  [31:0] data_mem_wr_port_dat_w = 32'd0;
wire [31:0] imm_i;
wire [31:0] imm_b;
wire [31:0] imm_s;
wire [31:0] imm_u;
wire [31:0] imm_j;
wire [30:0] led1_input;
reg  [7:0] led1_output = 8'd0;
wire [4:0] led1_addr;
wire led1_wen;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign instrcut_mem_port_adr = program_counter[7:0];
assign instruction = instrcut_mem_port_dat_r;
assign imm_i = {{20{instruction[31]}}, instruction[31:20]};
assign imm_b = {instruction[31], instruction[7], instruction[30:25], instruction[11:8], 1'd0};
assign imm_s = {{20{instruction[31]}}, instruction[31:25], instruction[11:7]};
assign imm_u = {instruction[31:12], {12{1'd0}}};
assign imm_j = {instruction[31], instruction[19:12], instruction[20], instruction[30:21], 1'd0};
assign rs1_in = instruction[19:15];
assign rs2_in = instruction[24:20];
assign rd_in = instruction[11:7];
assign opcode = instruction[6:0];
assign funct3 = instruction[14:12];
assign funct7 = instruction[31:25];
assign din = register_file_din_mux_output;
assign alu_op1_mux_input0 = reg_data1_out;
assign alu_op1_mux_input1 = program_counter;
assign alu_op1_mux_input2 = imm_j;
assign alu_op1_mux_input3 = 1'd0;
assign alu_op1_mux_is_branch = 1'd1;
assign alu_op2_mux_input0 = reg_data2_out;
assign alu_op2_mux_input1 = imm_u;
assign alu_op2_mux_input2 = imm_i;
assign alu_op2_mux_input3 = imm_s;
assign alu_op2_mux_input4 = program_counter;
assign alu_op2_mux_is_branch = 1'd1;
assign register_file_din_mux_input0 = imm_u;
assign register_file_din_mux_input1 = alu_out;
assign register_file_din_mux_input2 = 1'd0;
assign register_file_din_mux_input3 = pc_plus4;
assign register_file_din_mux_is_branch = 1'd1;
assign pc_input_mux_input0 = pc_plus4;
assign pc_input_mux_input1 = (program_counter + imm_b[31:2]);
assign pc_input_mux_input2 = 14'd11748;
assign pc_input_mux_input3 = alu_out[31:2];
assign operand1 = alu_op1_mux_output;
assign operand2 = alu_op2_mux_output;
assign led1_input = register_file_din_mux_output;
assign led1_addr = instruction[11:7];
assign led1_wen = write;
always @(*) begin
	write <= 1'd0;
	operation <= 16'd0;
	pc_input_mux_mux_control <= 2'd0;
	pc_input_mux_is_branch <= 1'd0;
	alu_op1_mux_mux_control <= 2'd0;
	register_file_din_mux_mux_control <= 2'd0;
	alu_op2_mux_mux_control <= 3'd0;
	if ((opcode == 6'd51)) begin
		case (funct3)
			1'd0: begin
				if ((funct7 == 1'd0)) begin
					operation <= 1'd1;
				end else begin
					operation <= 2'd2;
				end
			end
			1'd1: begin
				operation <= 6'd32;
			end
			2'd2: begin
				operation <= 9'd256;
			end
			2'd3: begin
				operation <= 10'd512;
			end
			3'd4: begin
				operation <= 3'd4;
			end
			3'd5: begin
				if ((funct7 == 1'd0)) begin
					operation <= 7'd64;
				end else begin
					operation <= 8'd128;
				end
			end
			3'd6: begin
				operation <= 4'd8;
			end
			3'd7: begin
				operation <= 5'd16;
			end
		endcase
		alu_op1_mux_mux_control <= 1'd0;
		alu_op2_mux_mux_control <= 1'd0;
		pc_input_mux_is_branch <= 1'd0;
		pc_input_mux_mux_control <= 1'd0;
		register_file_din_mux_mux_control <= 1'd1;
		write <= 1'd1;
	end else begin
		if ((opcode == 5'd19)) begin
			case (funct3)
				1'd0: begin
					if ((funct7 == 1'd0)) begin
						operation <= 1'd1;
					end else begin
						operation <= 2'd2;
					end
				end
				1'd1: begin
					operation <= 6'd32;
				end
				2'd2: begin
					operation <= 9'd256;
				end
				2'd3: begin
					operation <= 10'd512;
				end
				3'd4: begin
					operation <= 3'd4;
				end
				3'd5: begin
					if ((funct7 == 1'd0)) begin
						operation <= 7'd64;
					end else begin
						operation <= 8'd128;
					end
				end
				3'd6: begin
					operation <= 4'd8;
				end
				3'd7: begin
					operation <= 5'd16;
				end
			endcase
			alu_op1_mux_mux_control <= 1'd0;
			alu_op2_mux_mux_control <= 2'd2;
			pc_input_mux_is_branch <= 1'd0;
			pc_input_mux_mux_control <= 1'd0;
			register_file_din_mux_mux_control <= 1'd1;
			write <= 1'd1;
		end else begin
			if ((opcode == 7'd99)) begin
				case (funct3)
					1'd0: begin
						operation <= 11'd1024;
					end
					1'd1: begin
						operation <= 12'd2048;
					end
					3'd4: begin
						operation <= 13'd4096;
					end
					3'd5: begin
						operation <= 14'd8192;
					end
					3'd6: begin
						operation <= 15'd16384;
					end
					3'd7: begin
						operation <= 16'd32768;
					end
				endcase
				alu_op1_mux_mux_control <= 1'd0;
				alu_op2_mux_mux_control <= 1'd0;
				pc_input_mux_is_branch <= alu_out[0];
				pc_input_mux_mux_control <= 1'd1;
				register_file_din_mux_mux_control <= 1'd0;
				write <= 1'd0;
			end else begin
				if ((opcode == 7'd111)) begin
					case (1'd0)
						1'd0: begin
							if ((funct7 == 1'd0)) begin
								operation <= 1'd1;
							end else begin
								operation <= 2'd2;
							end
						end
						1'd1: begin
							operation <= 6'd32;
						end
						2'd2: begin
							operation <= 9'd256;
						end
						2'd3: begin
							operation <= 10'd512;
						end
						3'd4: begin
							operation <= 3'd4;
						end
						3'd5: begin
							if ((funct7 == 1'd0)) begin
								operation <= 7'd64;
							end else begin
								operation <= 8'd128;
							end
						end
						3'd6: begin
							operation <= 4'd8;
						end
						3'd7: begin
							operation <= 5'd16;
						end
					endcase
					alu_op1_mux_mux_control <= 2'd2;
					alu_op2_mux_mux_control <= 3'd4;
					pc_input_mux_is_branch <= 1'd0;
					pc_input_mux_mux_control <= 2'd3;
					register_file_din_mux_mux_control <= 2'd3;
					write <= 1'd1;
				end else begin
					if ((opcode == 7'd103)) begin
						case (funct3)
							1'd0: begin
								if ((funct7 == 1'd0)) begin
									operation <= 1'd1;
								end else begin
									operation <= 2'd2;
								end
							end
							1'd1: begin
								operation <= 6'd32;
							end
							2'd2: begin
								operation <= 9'd256;
							end
							2'd3: begin
								operation <= 10'd512;
							end
							3'd4: begin
								operation <= 3'd4;
							end
							3'd5: begin
								if ((funct7 == 1'd0)) begin
									operation <= 7'd64;
								end else begin
									operation <= 8'd128;
								end
							end
							3'd6: begin
								operation <= 4'd8;
							end
							3'd7: begin
								operation <= 5'd16;
							end
						endcase
						alu_op1_mux_mux_control <= 1'd0;
						alu_op2_mux_mux_control <= 2'd2;
						pc_input_mux_is_branch <= 1'd0;
						pc_input_mux_mux_control <= 2'd3;
						register_file_din_mux_mux_control <= 2'd3;
						write <= 1'd1;
					end else begin
						if ((opcode == 6'd55)) begin
							case (funct3)
								1'd0: begin
									if ((funct7 == 1'd0)) begin
										operation <= 1'd1;
									end else begin
										operation <= 2'd2;
									end
								end
								1'd1: begin
									operation <= 6'd32;
								end
								2'd2: begin
									operation <= 9'd256;
								end
								2'd3: begin
									operation <= 10'd512;
								end
								3'd4: begin
									operation <= 3'd4;
								end
								3'd5: begin
									if ((funct7 == 1'd0)) begin
										operation <= 7'd64;
									end else begin
										operation <= 8'd128;
									end
								end
								3'd6: begin
									operation <= 4'd8;
								end
								3'd7: begin
									operation <= 5'd16;
								end
							endcase
							alu_op1_mux_mux_control <= 1'd0;
							alu_op2_mux_mux_control <= 1'd0;
							pc_input_mux_is_branch <= 1'd0;
							pc_input_mux_mux_control <= 1'd0;
							register_file_din_mux_mux_control <= 1'd0;
							write <= 1'd1;
						end else begin
							if ((opcode == 5'd23)) begin
								case (1'd0)
									1'd0: begin
										if ((funct7 == 1'd0)) begin
											operation <= 1'd1;
										end else begin
											operation <= 2'd2;
										end
									end
									1'd1: begin
										operation <= 6'd32;
									end
									2'd2: begin
										operation <= 9'd256;
									end
									2'd3: begin
										operation <= 10'd512;
									end
									3'd4: begin
										operation <= 3'd4;
									end
									3'd5: begin
										if ((funct7 == 1'd0)) begin
											operation <= 7'd64;
										end else begin
											operation <= 8'd128;
										end
									end
									3'd6: begin
										operation <= 4'd8;
									end
									3'd7: begin
										operation <= 5'd16;
									end
								endcase
								alu_op1_mux_mux_control <= 1'd1;
								alu_op2_mux_mux_control <= 1'd1;
								pc_input_mux_is_branch <= 1'd0;
								pc_input_mux_mux_control <= 1'd0;
								register_file_din_mux_mux_control <= 1'd1;
								write <= 1'd1;
							end
						end
					end
				end
			end
		end
	end
end
assign pc_plus4 = (program_counter + 1'd1);
always @(*) begin
	alu_out <= 32'd0;
	case (operation)
		1'd1: begin
			alu_out <= (operand1 + operand2);
		end
		2'd2: begin
			alu_out <= (operand1 - operand2);
		end
		3'd4: begin
			alu_out <= (operand1 ^ operand2);
		end
		4'd8: begin
			alu_out <= (operand1 | operand2);
		end
		5'd16: begin
			alu_out <= (operand1 & operand2);
		end
		6'd32: begin
			alu_out <= (operand1 <<< operand2);
		end
		7'd64: begin
			alu_out <= (operand1 >>> operand2);
		end
		8'd128: begin
			alu_out <= (operand1 >>> operand2);
		end
		9'd256: begin
			if ((operand1 < operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd1;
			end
		end
		10'd512: begin
			if ((operand1 < operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd1;
			end
		end
		11'd1024: begin
			if ((operand1 == operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd0;
			end
		end
		12'd2048: begin
			if ((operand1 != operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd0;
			end
		end
		13'd4096: begin
			if ((operand1 < operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd0;
			end
		end
		14'd8192: begin
			if ((operand1 >= operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd0;
			end
		end
		15'd16384: begin
			if ((operand1 < operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd0;
			end
		end
		16'd32768: begin
			if ((operand1 >= operand2)) begin
				alu_out <= 1'd1;
			end else begin
				alu_out <= 1'd0;
			end
		end
		default: begin
			alu_out <= 1'd0;
		end
	endcase
end
always @(*) begin
	sp1_wrport_we <= 1'd0;
	sp2_wrport_adr <= 5'd0;
	sp1_wrport_adr <= 5'd0;
	sp2_wrport_we <= 1'd0;
	sp2_wrport_dat_w <= 32'd0;
	sp1_wrport_dat_w <= 32'd0;
	if ((rd_in != 1'd0)) begin
		sp1_wrport_adr <= rd_in;
		sp1_wrport_dat_w <= din;
		sp2_wrport_adr <= rd_in;
		sp2_wrport_dat_w <= din;
		sp1_wrport_we <= write;
		sp2_wrport_we <= write;
	end
end
assign sp1_rdport_adr = rs1_in;
assign reg_data1_out = sp1_rdport_dat_r;
assign sp2_rdport_adr = rs2_in;
assign reg_data2_out = sp2_rdport_dat_r;
always @(*) begin
	pc_input_mux_output <= 32'd0;
	case (pc_input_mux_mux_control)
		1'd0: begin
			pc_input_mux_output <= pc_input_mux_input0;
		end
		1'd1: begin
			if (pc_input_mux_is_branch) begin
				pc_input_mux_output <= pc_input_mux_input1;
			end else begin
				pc_input_mux_output <= pc_input_mux_input0;
			end
		end
		2'd2: begin
			pc_input_mux_output <= pc_input_mux_input2;
		end
		2'd3: begin
			pc_input_mux_output <= pc_input_mux_input3;
		end
	endcase
end
always @(*) begin
	register_file_din_mux_output <= 32'd0;
	case (register_file_din_mux_mux_control)
		1'd0: begin
			register_file_din_mux_output <= register_file_din_mux_input0;
		end
		1'd1: begin
			if (register_file_din_mux_is_branch) begin
				register_file_din_mux_output <= register_file_din_mux_input1;
			end else begin
				register_file_din_mux_output <= register_file_din_mux_input0;
			end
		end
		2'd2: begin
			register_file_din_mux_output <= register_file_din_mux_input2;
		end
		2'd3: begin
			register_file_din_mux_output <= register_file_din_mux_input3;
		end
	endcase
end
always @(*) begin
	alu_op1_mux_output <= 32'd0;
	case (alu_op1_mux_mux_control)
		1'd0: begin
			alu_op1_mux_output <= alu_op1_mux_input0;
		end
		1'd1: begin
			if (alu_op1_mux_is_branch) begin
				alu_op1_mux_output <= alu_op1_mux_input1;
			end else begin
				alu_op1_mux_output <= alu_op1_mux_input0;
			end
		end
		2'd2: begin
			alu_op1_mux_output <= alu_op1_mux_input2;
		end
		2'd3: begin
			alu_op1_mux_output <= alu_op1_mux_input3;
		end
	endcase
end
always @(*) begin
	alu_op2_mux_output <= 32'd0;
	case (alu_op2_mux_mux_control)
		1'd0: begin
			alu_op2_mux_output <= alu_op2_mux_input0;
		end
		1'd1: begin
			if (alu_op2_mux_is_branch) begin
				alu_op2_mux_output <= alu_op2_mux_input1;
			end else begin
				alu_op2_mux_output <= alu_op2_mux_input0;
			end
		end
		2'd2: begin
			alu_op2_mux_output <= alu_op2_mux_input2;
		end
		2'd3: begin
			alu_op2_mux_output <= alu_op2_mux_input3;
		end
		3'd4: begin
			alu_op2_mux_output <= alu_op2_mux_input3;
		end
	endcase
end
assign sys_clk = clk100;
assign por_clk = clk100;
assign sys_rst = int_rst;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	user_led0 <= led1_output[0];
	user_led1 <= led1_output[1];
	program_counter <= pc_input_mux_output;
	if ((led1_addr == 5'd31)) begin
		if (led1_wen) begin
			led1_output <= led1_input[7:0];
		end
	end
	if (sys_rst) begin
		user_led0 <= 1'd0;
		user_led1 <= 1'd0;
		program_counter <= 32'd0;
		led1_output <= 8'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory scratchpad1: 32-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Async | Write: ---- | 
reg [31:0] scratchpad1[0:31];
reg [4:0] scratchpad1_adr0;
always @(posedge sys_clk) begin
	if (sp1_wrport_we)
		scratchpad1[sp1_wrport_adr] <= sp1_wrport_dat_w;
	scratchpad1_adr0 <= sp1_wrport_adr;
end
always @(posedge sys_clk) begin
end
assign sp1_wrport_dat_r = scratchpad1[scratchpad1_adr0];
assign sp1_rdport_dat_r = scratchpad1[sp1_rdport_adr];


//------------------------------------------------------------------------------
// Memory scratchpad2: 32-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Async | Write: ---- | 
reg [31:0] scratchpad2[0:31];
reg [4:0] scratchpad2_adr0;
always @(posedge sys_clk) begin
	if (sp2_wrport_we)
		scratchpad2[sp2_wrport_adr] <= sp2_wrport_dat_w;
	scratchpad2_adr0 <= sp2_wrport_adr;
end
always @(posedge sys_clk) begin
end
assign sp2_wrport_dat_r = scratchpad2[scratchpad2_adr0];
assign sp2_rdport_dat_r = scratchpad2[sp2_rdport_adr];


//------------------------------------------------------------------------------
// Memory instrct_mem: 256-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Async | Write: ---- | 
reg [31:0] instrct_mem[0:255];
initial begin
	$readmemh("instrct_mem.init", instrct_mem);
end
always @(posedge sys_clk) begin
end
assign instrcut_mem_port_dat_r = instrct_mem[instrcut_mem_port_adr];


//------------------------------------------------------------------------------
// Memory data_mem: 256-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Async | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
reg [31:0] data_mem[0:255];
reg [7:0] data_mem_adr1;
always @(posedge sys_clk) begin
end
always @(posedge sys_clk) begin
	if (data_mem_wr_port_we)
		data_mem[data_mem_wr_port_adr] <= data_mem_wr_port_dat_w;
	data_mem_adr1 <= data_mem_wr_port_adr;
end
assign data_mem_rd_port_dat_r = data_mem[data_mem_rd_port_adr];
assign data_mem_wr_port_dat_r = data_mem[data_mem_adr1];


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-01-09 18:08:51.
//------------------------------------------------------------------------------
